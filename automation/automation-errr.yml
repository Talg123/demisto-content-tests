commonfields:
  id: 3c353c08-3e87-4afd-8ef6-791fab26b158
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: errr
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  """Base Script for Cortex XSOAR
  This is an empty script with some basic structure according
  to the code conventions.
  MAKE SURE YOU REVIEW/REPLACE ALL THE COMMENTS MARKED AS "TODO"
  """

  from typing import Dict, Any
  import traceback


  ''' STANDALONE FUNCTION '''


  # TODO: REMOVE the following dummy function:
  def basescript_dummy(dummy: str) -> Dict[str, str]:
      """Returns a simple python dict with the information provided
      in the input (dummy).
      :type dummy: ``str``
      :param dummy: string to add in the dummy dict that is returned
      :return: dict as {"dummy": dummy}
      :rtype: ``str``
      """

      return {"dummy": dummy}
  # TODO: ADD HERE THE FUNCTIONS TO INTERACT WITH YOUR PRODUCT API


  ''' COMMAND FUNCTION '''


  # TODO: REMOVE the following dummy command function
  def basescript_dummy_command(args: Dict[str, Any]) -> CommandResults:

      dummy = args.get('dummy', 'example dummy')

      if not dummy:
          raise ValueError('dummy not specified')

      # Call the standalone function and get the raw response
      result = basescript_dummy(dummy)
  fff
      return CommandResults(
          outputs_prefix='BaseScript',
          outputs_key_field='',
          outputs=result,
      )
  # TODO: ADD additional command functions that translate Cortex XSOAR inputs/outputs


  ''' MAIN FUNCTION '''


  def main():
      try:
          # TODO: replace the invoked command function with yours
          return_results(basescript_dummy_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
type: python
