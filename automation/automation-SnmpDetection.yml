args:
- description: IP address.
  name: ip_address
  required: true
- default: true
  defaultValue: "3"
  description: Request timeout value, in seconds. Default value is 3 seconds.
  name: time_out
comment: Deprecated. No available replacement.
commonfields:
  id: SnmpDetection
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.7.30
    packID: CortexAttackSurfaceManagement
    packName: Cortex Attack Surface Management
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SnmpDetection
nativeimage:
- "8.6"
outputs:
- contextPath: SnmpDetection
  description: Checks if SNMP version is enabled and gets the versions running
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SnmpDetection', 'start', __line__())
  ### pack version: 1.7.30


  import ipaddress
  import socket


  # Hex value of the Snmp probes for each version.
  long_hex_v3 = "303a020103300f02024a69020300ffe30401040201030410300e0"
  hex_data = {
      "v1": [
          "302902010004067075626c6963a01c0204565adc5d020100020100300e300c06082b060102010101000500"
      ],
      "v2": [
          "302602010104067075626c6963a1190204dc63c29a020100020100300b300906052b060102010500"
      ],
      "v3": [
          long_hex_v3 + "400020100020100040004000400301204000400a00c020237f00201000201003000"
      ],
  }
  port = 161  # default SNMP port


  def snmp_send(udp_socket, probe, ip_address, port, time_out):
      """Return the Snmp response

          Parameters:
              udp_socket (object): Python object of socket.
              probe (str): String value of Snmp data payload.
              ip_address (str): String value of IP address.
              time_out (str): String value of Time out.
              port (int): Integer port number.

          Returns:
              Str: Returns the value of the Snmp response.
      """

      udp_socket.sendto(bytes.fromhex(probe), (ip_address, port))
      udp_socket.settimeout(int(time_out))
      return udp_socket.recvfrom(1024)


  def snmp_v1(udp_socket, probe, ip_address, port, time_out):
      """Return the Snmp Version 1 response."""
      return snmp_send(udp_socket, probe, ip_address, port, time_out)


  def snmp_v2(udp_socket, probe, ip_address, port, time_out):
      """Return the Snmp Version 2 response."""

      return snmp_send(udp_socket, probe, ip_address, port, time_out)


  def snmp_v3(udp_socket, probe, ip_address, port, time_out):
      """Return the Snmp Version 3 response."""

      return snmp_send(udp_socket, probe, ip_address, port, time_out)


  def snmp_detect(ip_address: str, time_out: str) -> dict:
      """Return the dict of snmp versions enabled

          Parameters:
              ip_address (str): String value of Ip address.
              time_out (str): String value of Time out.

          Returns:
              Dict: Returns the dict containing if Snmp is enabled or not and list of versions enabled.
      """

      udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

      ver = list()

      enabled = "False"

      for version, probes in hex_data.items():
          for probe in probes:
              try:
                  if version == "v1":
                      snmp_v1(udp_socket, probe, ip_address, port, time_out)
                  elif version == "v2":
                      snmp_v2(udp_socket, probe, ip_address, port, time_out)
                  else:
                      snmp_v3(udp_socket, probe, ip_address, port, time_out)
                  enabled = "True"
                  ver.append(version)
              except Exception:
                  pass
      results = {"enabled": enabled, "versions": ver}
      return results


  def main():
      ip_address = demisto.args().get("ip_address")
      try:
          ipaddress.ip_address(ip_address)  # validate ip address
          time_out = demisto.args().get("time_out")
          results = snmp_detect(ip_address, time_out)
          readable_output = tableToMarkdown('SNMP results:', results)
          return_results(CommandResults(
              outputs_prefix='SnmpDetection',
              outputs=results,
              raw_response=results,
              readable_output=readable_output
          ))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f"SnmpDetection failed, Error: {str(ex)}")


  """ ENTRY POINT """
  if __name__ in ("__main__", "__builtin__", "builtins"):
      """This is executed when run from the command line"""
      main()

  register_module_line('SnmpDetection', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
