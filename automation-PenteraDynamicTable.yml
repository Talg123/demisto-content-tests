comment: Renders a Markdown Table from penteraoperationdetails field in Pentera Insight
  incidents
commonfields:
  id: PenteraDynamicTable
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.3.5
    packID: Pcysys
    packName: Pentera
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: PenteraDynamicTable
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('PenteraDynamicTable', 'start', __line__())
  ### pack version: 1.3.5




  def pentera_dynamic_table(incident: dict = None):
      if not incident:
          raise ValueError('No incident')

      custom_fields = incident.get('CustomFields')
      if not custom_fields:
          raise ValueError('No custom fields')

      operation_type = custom_fields.get('penteraoperationtype')
      if not operation_type:
          raise ValueError('No Pentera Operation Type')

      details_grid = custom_fields.get('penteraoperationdetails')
      if not details_grid:
          raise ValueError('No details grid')

      details_table = tableToMarkdown(operation_type, details_grid)
      return details_table


  def main():
      try:
          incident = demisto.incidents()[0]
          details_table = pentera_dynamic_table(incident)
          return_outputs(readable_output=details_table)

      except Exception as e:
          return_error(f'Error in creating PenteraDynamicTable: {str(e)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('PenteraDynamicTable', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
