args:
- default: true
  description: The HTML to strip tags from
  name: html
  required: true
- default: true
  defaultValue: body
  description: Specify HTML tag to extract the text from within.
  name: html_tag
comment: Extract regular text from the given HTML
commonfields:
  id: TextFromHTML
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.13
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: TextFromHTML
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TextFromHTML', 'start', __line__())
  ### pack version: 1.12.13




  import re


  def get_plain_text(html_regex):
      data = ''
      if html_regex and html_regex.group(0):
          data = re.sub(r'<.*?>', '', html_regex.group(0))
          entities = {'quot': '"', 'amp': '&', 'apos': "'", 'lt': '<', 'gt': '>', 'nbsp': ' ',
                      'copy': '(C)', 'reg': '(R)', 'tilde': '~', 'ldquo': '"', 'rdquo': '"', 'hellip': '...'}
          for e in entities:
              data = data.replace(f'&{e};', entities[e])
      return data


  def text_from_html(args):
      html = args['html']
      html_tag = args.get('html_tag', 'body')

      body = re.search(fr'<{html_tag}.*/{html_tag}>', html, re.M + re.S + re.I + re.U)
      data = get_plain_text(body)
      return data if data != '' else 'Could not extract text'


  if __name__ in ["__builtin__", "builtins"]:
      result = text_from_html(demisto.args())
      demisto.results(result)

  register_module_line('TextFromHTML', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python
